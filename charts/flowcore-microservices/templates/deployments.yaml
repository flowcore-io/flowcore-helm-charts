{{- range $microservice, $spec := .Values.deployments }}
{{- if $spec.enabled }}
{{- $serviceName := cat $microservice | kebabcase }}
{{- $component := "service" }}
{{- if $spec.component }}
{{- $component = $spec.component }}
{{- end }}
{{- $env := $.Values.environment | default "flowcore" }}
{{- $platform := $.Values.platform | default "flowcore" }}
{{- $source := "node" }}
{{- if $spec.source }}
{{- $source = $spec.source }}
{{- end }}
{{- $repoBase := $.Values.imageRepository -}}
{{- $replicas := $spec.deployment.replicas | default 1 }}
{{- $httpPort := 3000 }}
{{- if $spec.service }}
{{- if $spec.service.httpPort }}
{{- $httpPort = $spec.service.httpPort }}
{{- end }}
{{- end }}
{{- $wellKnownUrl := $.Values.oidcWellKnownUrl }}
{{- $sidecarHealthPort := add $httpPort 1 }}
{{- $maxSurge := "25%" }}
{{- $maxUnavailable := 0 }}
{{- if $spec.deployment }}
{{- $maxSurge = $spec.deployment.maxSurge }}
{{- $maxUnavailable = $spec.deployment.maxUnavailable }}
{{- end }}
{{- $defaultPullSecrets := $.Values.imagePullSecrets }}
{{- $defaultWebhookBaseUrl := $.Values.webhookBaseURL }}
{{- $castAiSpot := $spec.castAiSpot | default "none" }}
{{- $nodeTemplate := $spec.castAiNodeTemplate | default "spot-instances" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels: &common_labels
    app: {{ $serviceName }}
    app.kubernetes.io/name: {{ $serviceName }}
    app.kubernetes.io/version: {{ $spec.deployment.tag | quote }}
    app.kubernetes.io/component: {{ $component }}
    app.kubernetes.io/part-of: {{ $platform }}
  {{- if $.Values.commonAnnotations }}
  annotations:
    {{- $.Values.commonAnnotations | toYaml | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ $replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ $maxSurge }}
      maxUnavailable: {{ $maxUnavailable }}
  selector:
    matchLabels:
      app: {{ $serviceName }}
  template:
    metadata:
      labels: *common_labels
      {{- if $spec.metrics }}
      annotations:
        {{- if $spec.metrics.enabled }}
        prometheus.io/scrape: {{ $spec.metrics.enabled | default "false" | quote }}
        prometheus.io/port: {{ $spec.metrics.port | default 3000 | quote }}
        {{- if $spec.metrics.path }}
        prometheus.io/path: {{ $spec.metrics.path }}
        {{- end }}
        {{- end }}
        {{- if $.Values.commonAnnotations }}
        {{- $.Values.commonAnnotations | toYaml | nindent 8 }}
        {{- end }}
        {{- if $spec.podAnnotations }}
        {{- $spec.podAnnotations | toYaml | nindent 8 }}
        {{- end }}
      {{- else }}
      {{- if $spec.podAnnotations }}
      annotations:
        {{- if $.Values.commonAnnotations }}
        {{- $.Values.commonAnnotations | toYaml | nindent 8 }}
        {{- end }}
        {{- if $spec.podAnnotations }}
        {{- $spec.podAnnotations | toYaml | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- end }}
    spec:
      restartPolicy: {{ $spec.restartPolicy | default "Always" }}
      {{- /* Handle CastAI spot instance configurations */ -}}
      {{- if eq $castAiSpot "required" }}
      nodeSelector:
        scheduling.cast.ai/node-template: {{ $nodeTemplate }}
      tolerations:
        - key: "scheduling.cast.ai/node-template"
          value: {{ $nodeTemplate }}
          operator: "Equal"
          effect: "NoSchedule"
      {{- end }}
      {{- if or $spec.affinity (eq $castAiSpot "preferred") }}
      affinity:
        {{- if and $spec.affinity (ne $castAiSpot "preferred") }}
        {{- $spec.affinity | toYaml | nindent 8 }}
        {{- else if and (eq $castAiSpot "preferred") (not $spec.affinity) }}
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: scheduling.cast.ai/node-template
                    operator: In
                    values:
                      - {{ $nodeTemplate }}
        {{- else if and (eq $castAiSpot "preferred") $spec.affinity }}
        {{- range $k, $v := $spec.affinity }}
        {{- if eq $k "nodeAffinity" }}
        nodeAffinity:
          {{- if $v.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{- range $item := $v.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ $item.weight }}
              preference:
                {{- if $item.preference.matchExpressions }}
                matchExpressions:
                  {{- range $expr := $item.preference.matchExpressions }}
                  - key: {{ $expr.key }}
                    operator: {{ $expr.operator }}
                    values:
                    {{- range $val := $expr.values }}
                    - {{ $val }}
                    {{- end }}
                  {{- end }}
                {{- end }}
                {{- if $item.preference.matchFields }}
                matchFields:
                  {{- range $field := $item.preference.matchFields }}
                  - key: {{ $field.key }}
                    operator: {{ $field.operator }}
                    values:
                    {{- range $val := $field.values }}
                    - {{ $val }}
                    {{- end }}
                  {{- end }}
                {{- end }}
            {{- end }}
            - weight: 100
              preference:
                matchExpressions:
                  - key: scheduling.cast.ai/node-template
                    operator: In
                    values:
                      - {{ $nodeTemplate }}
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: scheduling.cast.ai/node-template
                    operator: In
                    values:
                      - {{ $nodeTemplate }}
          {{- end }}
          {{- range $nk, $nv := $v }}
          {{- if ne $nk "preferredDuringSchedulingIgnoredDuringExecution" }}
          {{ $nk }}: {{ $nv | toYaml | nindent 12 }}
          {{- end }}
          {{- end }}
        {{- else }}
        {{ $k }}: {{ $v | toYaml | nindent 10 }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- if eq $castAiSpot "preferred" }}
      tolerations:
        - key: "scheduling.cast.ai/node-template"
          value: {{ $nodeTemplate }}
          operator: "Equal"
          effect: "NoSchedule"
      {{- end }}
      containers:
        - name: {{ $serviceName }}
          image: "{{ $repoBase }}/{{ $spec.deployment.image }}:{{ $spec.deployment.tag }}"
          env:
            {{- range $index, $transportName := $spec.useTransports }}
            {{- $transportTarget := "" }}
            {{- if eq (kindOf $transportName) "string" }}
            {{- $transportTarget = $transportName }}
            {{- else }}
            {{- $transportTarget = $transportName.name }}
            {{- end }}
            {{- range $transportKey, $transportValue := index $.Values.transport $transportTarget }}
            - name: {{ $transportKey }}
              {{- if eq (kindOf $transportName) "string" }}
              {{- $transportValue | toYaml | nindent 14 }}
              {{- else }}
              {{- if $transportName.overrides }}
              {{- range $overrideKey, $overrideValue := $transportName.overrides }}
              {{- if eq $overrideKey $transportKey }}
              {{- $overrideValue | toYaml | nindent 14 }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- range $envKey, $envValue := $spec.env }}
            - name: {{ $envKey }}
              {{- $envValue | toYaml | nindent 14 }}
            {{- end }}
            - name: OIDC_WELLKNOWN_URL
              value: {{ $wellKnownUrl }}
            {{- if $spec.useFlowcoreWebhooks }}
            - name: WEBHOOK_BASE_URL
              value: {{ $defaultWebhookBaseUrl }}
            - name: WEBHOOK_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $serviceName }}-credentials
                  key: flowcore-webhook-api-key
            {{- end }}
          {{- if $spec.volumes }}
          volumeMounts:
          {{- range $volumeMountName, $volumeSpec := $spec.volumes }}
            {{- if ne ($volumeSpec.mainMount | default "yes") "no" }}
            - name: {{ cat $volumeMountName "volume"| kebabcase }}
              mountPath: {{ $volumeSpec.mountPath }}
              {{- if $volumeSpec.subPath }}
              subPath: {{ $volumeSpec.subPath }}
              {{- end }}
            {{- end }}
          {{- end }}
          {{- end }}
          ports:
            - name: "http"
              containerPort: {{ $httpPort }}
            {{- if $spec.service }}
            {{- range $name, $portSpec := $spec.service.extraPorts }}
            - name: {{ $name | kebabcase | quote }}
              containerPort: {{ $portSpec.port }}
            {{- end }}
            {{- end }}
          {{- if $spec.livenessProbe }}
          livenessProbe:
          {{- $spec.livenessProbe | toYaml | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ $httpPort }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          {{- end }}
          {{- if $spec.readinessProbe }}
          readinessProbe:
          {{- $spec.readinessProbe | toYaml | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ $httpPort }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
          {{- end }}
          {{- if $spec.deployment.resources }}
          resources: {{ $spec.deployment.resources | toYaml | nindent 12 }}
          {{- else }}
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          {{- end }}
        {{- range $sidecarName, $sidecarSpec := $spec.sidecars }}
        {{- if $sidecarSpec.enabled }}
        - name: {{ $sidecarName | kebabcase }}
          image: "{{ $sidecarSpec.repo | default $repoBase }}/{{ $sidecarSpec.image }}:{{ $sidecarSpec.tag }}"
          env:
            {{- range $index, $transportName := $spec.useTransports }}
            {{- $transportTarget := "" }}
            {{- if eq (kindOf $transportName) "string" }}
            {{- $transportTarget = $transportName }}
            {{- else }}
            {{- $transportTarget = $transportName.name }}
            {{- end }}
            {{- range $transportKey, $transportValue := index $.Values.transport $transportTarget }}
            - name: {{ $transportKey }}
              {{- if eq (kindOf $transportName) "string" }}
              {{- $transportValue | toYaml | nindent 14 }}
              {{- else }}
              {{- if $transportName.overrides }}
              {{- range $overrideKey, $overrideValue := $transportName.overrides }}
              {{- if eq $overrideKey $transportKey }}
              {{- $overrideValue | toYaml | nindent 14 }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- range $envKey, $envValue := $sidecarSpec.env }}
            - name: {{ $envKey }}
              {{- $envValue | toYaml | nindent 14 }}
            {{- end }}
            - name: PORT
              value: {{ $sidecarSpec.httpPort | default $sidecarHealthPort | quote }}
            - name: OIDC_WELLKNOWN_URL
              value: {{ $wellKnownUrl }}
          {{- if $sidecarSpec.volumes }}
          volumeMounts:
          {{- range $sidecarVolumeName := $sidecarSpec.volumes }}
            {{- $vspec := "" }}
            {{- range $key, $value := $.Values.deployments.testService.volumes }}
              {{- if eq $key $sidecarVolumeName }}
                {{- $vspec = $value }}
              {{- end }}
            {{- end }}
            - name: {{ cat $vspec.sidecarVolumeName | kebabcase }}
              mountPath: {{ $vspec.mountPath }}
              {{- if $vspec.subPath }}
              subPath: {{ $vspec.subPath }}
              {{- end }}
          {{- end }}
          {{- end }}
          {{- if $sidecarSpec.resources }}
          resources: {{ $spec.deployment.resources | toYaml | nindent 12 }}
          {{- else }}
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          {{- end }}
        {{- if not $sidecarSpec.httpPort }}
        {{- $sidecarHealthPort = add $sidecarHealthPort 1 }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- if $spec.imagePullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := $spec.imagePullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
      {{- else if $defaultPullSecrets }}
      imagePullSecrets:
      {{- range $pullSecret := $defaultPullSecrets }}
        - name: {{ $pullSecret }}
      {{- end }}
      {{- end }}
      {{- if $spec.deployment.serviceAccount }}
      serviceAccountName: {{ $spec.deployment.serviceAccount }}
      {{- end }}
      {{- if $spec.volumes }}
      volumes:
      {{- range $volumeMountName, $volumeSpec := $spec.volumes }}
        - name: {{ cat $volumeMountName "volume"| kebabcase }}
          {{- if eq $volumeSpec.type "secret" }}
          secret:
            secretName: {{ $volumeSpec.secret }}
          {{- end }}
          {{- if eq $volumeSpec.type "configMap" }}
          configMap:
            name: {{ $volumeMountName }}
          {{- end }}
          {{- if eq $volumeSpec.type "emptyDir" }}
          emptyDir: {}
          {{- end }}
      {{- end }}
      {{- end }}
{{- if $spec.service }}
{{- if $spec.service.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
  {{- if $.Values.commonAnnotations }}
  annotations:
    {{- $.Values.commonAnnotations | toYaml | nindent 4 }}
  {{- end }}
spec:
  selector:
    app: {{ $serviceName }}
  ports:
    - name: "http"
      protocol: TCP
      port: {{ $httpPort }}
      targetPort: {{ $httpPort }}
    {{- range $name, $portSpec := $spec.service.extraPorts }}
    - name: {{ $name | quote }}
      protocol: {{ $portSpec.type | default "TCP" }}
      port: {{ $portSpec.port }}
      targetPort: {{ $portSpec.port }}
    {{- end }}
{{- end }}
{{- end }}
{{- if $spec.ingress }}
{{- if $spec.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $serviceName }}
  annotations:
    kubernetes.io/ingress.class: nginx
    {{- if $spec.ingress.annotations -}}
    {{- $spec.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if $.Values.commonAnnotations }}
    {{- $.Values.commonAnnotations | toYaml | nindent 4 }}
    {{- end }}
spec:
  rules:
  {{- range $route := $spec.ingress.route }}
  {{- range $routeHost := $route.hosts }}
    - host: {{ $routeHost }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: {{ $httpPort }}
  {{- end }}
  {{- end }}
  tls:
  {{- range $route := $spec.ingress.route }}
    - hosts:
    {{- range $routeHost := $route.hosts }}
        - {{ $routeHost }}
    {{- end }}
      secretName: {{ $route.tlsSecret }}
  {{- end }}
{{- end }}
{{- end }}
{{- if $spec.hpa }}
{{- if $spec.hpa.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ $serviceName }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $serviceName }}
  minReplicas: {{ $spec.hpa.minReplicas | default 2 }}
  maxReplicas: {{ $spec.hpa.maxReplicas | default 5 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ $spec.hpa.cpu | default 100 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: AverageValue
        averageValue: {{ $spec.hpa.memory | default "512Mi" | quote }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}